一、【从request对象中获取数据】

1.URL相关信息
#除域名以外的请求路径，以正斜杠开头
$request.path

#主机名|域名
$request.get_host()

#请求路径，可能包含查询字符串
$request.get_full_path()

#如果通过https访问，则返回True
$request.is_secure

2.request的其他信息
#一个Python字典，包含了所有本次HTTP请求的Header信息
#注意，因为 request.META 是一个普通的Python字典，因此当你试图访问一个不存在的键时，会触发一个KeyError异常。（HTTPheader信息是由用户的浏览器所提交的、不应该给予信任的“额外”数据，因此你总是应该好好设计你的应用以便当一个特定的Header数据不存在时，给出一个优雅的回应。）你应该用 try/except 语句，或者用Python字典的 get() 方法来处理这些“可能不存在的键”。
$request.META

3.提交的数据信息
#返回类字典对象，包含了用户所提交的信息
$request.GET
$request.POST

4.什么是[3.]提到的类字典对象
相同：行为像python中标准的字典对象，但技术底层并不是dict。比如request.GET&request.POST都有get()\keys()\values()方法，可以用for k in request.GET

区别：这些类字典对象中有一些普通dict没有的方法：未完……

二、【一个简单的表单处理示例】
见:books/search-form/

三、【简单的验证】

四、【编写Contact表单】

五、【第一个form】类
django带有一个form库，称为django.forms，这个库可以处理HTML表单显示以及校验。
[历史]
在Django社区上会经常看到django.newforms这个词语。当人们讨论django.newforms，其实就是我们本章里面介绍的django.forms。12

改名其实有历史原因的。 当Django一次向公众发行时，它有一个复杂难懂的表单系统：django.forms。后来它被完全重写了，新的版本改叫作：django.newforms，这样人们还可以通过名称，使用旧版本。 当Django 1.0发布时，旧版本django.forms就不再使用了，而django.newforms也终于可以名正言顺的叫做：django.forms。

>>>
from contact.forms import *
c = ContactForm()
# 默认按照table形式输出
print(c)
# 默认按照ul形式输出
print(c.as_ul())
# 默认按照p形式输出
print(c.as_p)
# 请注意，标签<table>、<ul>、<form>的开闭合标记没有包含于输出当中，这样你就可以添加额外的行或者自定义格式。
>>> print f['subject']
<input type="text" name="subject" id="id_subject" />
>>> print f['message']
<input type="text" name="message" id="id_message" />
>>> f.is_valid()
True
>>> f.is_bound
True
>>> f.cleaned_data
{message': uNice site!, email: uadrian@example.com, subject: uHello}

>>> f = ContactForm({'subject': 'Hello', 'message': ''})
>>> f.is_valid()
False
>>> f['message'].errors
[u'This field is required.']

六、【在视图中使用Form】
Django的forms框架处理HTML显示、数据校验、数据清理和表单错误重现。

ex1.改变字段显示
message = forms.CharField(widget=forms.Textarea)

ex2.设置最大长度、最小长度
subject = forms.CharField(max_length=100,min_length=10)

ex3.设置初始值
form = ContactForm(
            initial={'subject': 'I love your site!'}
        )

ex4.自定义校验规则

ex5.指定标签

ex6.定制Form设计